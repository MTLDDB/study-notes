#lang sicp

(define (square x)
  (* x x))

(define (cube x)
  (* x x x))
(cube 3)

(define (cube-root-iter guess x)
  (if(good guess x)
     guess
     (cube-root-iter (improve guess x)
                     x)))

(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))

(define (good guess x)
  (< (abs (- (cube guess) x)) 0.0001))

(define (improve guess x)
  ((/ (+ (/ x (square guess)) (+ 2 guess))) 3))

(define (cube-root x)
  (cube-root-iter 1.0 x))

(cube-root 8)